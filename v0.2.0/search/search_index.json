{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>Qermod</code>","text":"<p>Running programs on NISQ devices often leads to partially useful results due to the presence of noise. In order to perform realistic simulations, a number of noise models are defined in <code>Qermod</code> (for digital or analog operations and simulated readout errors) are supported in <code>Qadence</code> through their implementation in backends and corresponding error mitigation techniques whenever possible.</p>"},{"location":"#noise","title":"Noise","text":""},{"location":"#readout-errors","title":"Readout errors","text":"<p>State Preparation and Measurement (SPAM) in the hardware is a major source of noise in the execution of quantum programs. They are typically described using confusion matrices of the form:</p> \\[ T(x|x')=\\delta_{xx'} \\] <p>Two types of readout protocols are available:</p> <ul> <li><code>NoiseCategory.READOUT.INDEPENDENT</code> where each bit can be corrupted independently of each other.</li> <li><code>NoiseCategory.READOUT.CORRELATED</code> where we can define of confusion matrix of corruption between each possible bitstrings.</li> </ul>"},{"location":"#analog-noisy-simulation","title":"Analog noisy simulation","text":"<p>At the moment, analog noisy simulations are only compatible with the Pulser backend.</p>"},{"location":"#digital-noisy-simulation","title":"Digital noisy simulation","text":"<p>When dealing with programs involving only digital operations, several options are made available from PyQTorch via the <code>NoiseCategory.DIGITAL</code>.</p>"},{"location":"#implementation","title":"Implementation","text":""},{"location":"#primitivenoise","title":"PrimitiveNoise","text":"<p>A primitive Noise models can be defined via the <code>PrimitiveNoise</code>. It contains a noise configuration defined by a <code>NoiseProtocol</code> type and an <code>error_definition</code> argument. Several predefined types are available in <code>qermod.protocols</code>.</p> <pre><code>from qermod import PrimitiveNoise\nfrom qermod import protocols\nfrom qadence.types import NoiseProtocol\n\nanalog_noise = protocols.AnalogDepolarizing(error_definition=0.1)\ndigital_noise = protocols.Bitflip(error_definition=0.1)\nreadout_noise = protocols.IndependentReadout(error_definition=0.1)\n\nsimple_primitive = PrimitiveNoise(protocol=NoiseProtocol.DIGITAL.BITFLIP, error_definition=0.1)\n</code></pre> <pre><code>\n</code></pre>"},{"location":"#chaining","title":"Chaining","text":"<p>One can also compose noise configurations via the <code>chain</code> method, or by using the <code>|</code> or <code>|=</code> operator.</p> <pre><code>from qermod import chain\n\ndigital_readout = digital_noise | readout_noise\nprint(digital_readout)\n\ndigital_readout = chain(digital_noise, readout_noise)\nprint(digital_readout)\n</code></pre> <pre><code>blocks=(Bitflip(protocol=&lt;DigitalNoiseType.BITFLIP: 'BitFlip'&gt;, error_definition=0.100000000000000), IndependentReadout(protocol=&lt;ReadoutNoise.INDEPENDENT: 'Independent Readout'&gt;, error_definition=0.100000000000000, seed=None, noise_distribution=None))\nblocks=(Bitflip(protocol=&lt;DigitalNoiseType.BITFLIP: 'BitFlip'&gt;, error_definition=0.100000000000000), IndependentReadout(protocol=&lt;ReadoutNoise.INDEPENDENT: 'Independent Readout'&gt;, error_definition=0.100000000000000, seed=None, noise_distribution=None))\n</code></pre> <p>Noise scope</p> <p>Note it is not possible to define a noise configuration with both digital and analog noises, both readout and analog noises, several analog noises, several readout noises, or a readout noise that is not the last defined protocol in a sequence.</p>"},{"location":"#implement-parametric-noise","title":"Implement parametric noise","text":"<p>Noise definition can be made parametric via <code>qadence.parameters.Parameter</code>:</p> <pre><code>from qadence.parameters import Parameter\ndigital_noise = protocols.Bitflip(error_definition=Parameter('p', trainable=True))\n</code></pre> <pre><code>\n</code></pre>"},{"location":"#serialization","title":"Serialization","text":"<p>Regarding serialization, we can use <code>qermod.serialize</code> and <code>qermod.deserialize</code>:</p> <pre><code>from qermod import serialize, deserialize, Bitflip\nnoise = Bitflip(error_definition=0.1)\nnoise_serial = deserialize(serialize(noise))\nassert noise == noise_serial\n</code></pre> <pre><code>\n</code></pre>"}]}